<?php
/**
 * ProductListingResult
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ServeXS\Shopware\v6\Store\Model;

use \ArrayAccess;
use \ServeXS\Shopware\v6\Store\ObjectSerializer;

/**
 * ProductListingResult Class Doc Comment
 *
 * @category Class
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ProductListingResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductListingResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_alias' => 'string',
        'entity' => 'string',
        'total' => 'int',
        'aggregations' => 'object[]',
        'page' => 'int',
        'limit' => 'int',
        'current_filters' => '\ServeXS\Shopware\v6\Store\Model\ProductListingResultAllOfCurrentFilters',
        'available_sortings' => 'object[]',
        'sorting' => 'string',
        'elements' => '\ServeXS\Shopware\v6\Store\Model\Product[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_alias' => null,
        'entity' => null,
        'total' => null,
        'aggregations' => null,
        'page' => null,
        'limit' => null,
        'current_filters' => null,
        'available_sortings' => null,
        'sorting' => null,
        'elements' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_alias' => 'apiAlias',
        'entity' => 'entity',
        'total' => 'total',
        'aggregations' => 'aggregations',
        'page' => 'page',
        'limit' => 'limit',
        'current_filters' => 'currentFilters',
        'available_sortings' => 'availableSortings',
        'sorting' => 'sorting',
        'elements' => 'elements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_alias' => 'setApiAlias',
        'entity' => 'setEntity',
        'total' => 'setTotal',
        'aggregations' => 'setAggregations',
        'page' => 'setPage',
        'limit' => 'setLimit',
        'current_filters' => 'setCurrentFilters',
        'available_sortings' => 'setAvailableSortings',
        'sorting' => 'setSorting',
        'elements' => 'setElements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_alias' => 'getApiAlias',
        'entity' => 'getEntity',
        'total' => 'getTotal',
        'aggregations' => 'getAggregations',
        'page' => 'getPage',
        'limit' => 'getLimit',
        'current_filters' => 'getCurrentFilters',
        'available_sortings' => 'getAvailableSortings',
        'sorting' => 'getSorting',
        'elements' => 'getElements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_alias'] = $data['api_alias'] ?? null;
        $this->container['entity'] = $data['entity'] ?? null;
        $this->container['total'] = $data['total'] ?? null;
        $this->container['aggregations'] = $data['aggregations'] ?? null;
        $this->container['page'] = $data['page'] ?? null;
        $this->container['limit'] = $data['limit'] ?? null;
        $this->container['current_filters'] = $data['current_filters'] ?? null;
        $this->container['available_sortings'] = $data['available_sortings'] ?? null;
        $this->container['sorting'] = $data['sorting'] ?? null;
        $this->container['elements'] = $data['elements'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_alias
     *
     * @return string|null
     */
    public function getApiAlias()
    {
        return $this->container['api_alias'];
    }

    /**
     * Sets api_alias
     *
     * @param string|null $api_alias Alias which can be used to restrict response fields. For more information see [includes](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#includes-apialias).
     *
     * @return self
     */
    public function setApiAlias($api_alias)
    {
        $this->container['api_alias'] = $api_alias;

        return $this;
    }

    /**
     * Gets entity
     *
     * @return string|null
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param string|null $entity entity
     *
     * @return self
     */
    public function setEntity($entity)
    {
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total The total number of found entities
     *
     * @return self
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets aggregations
     *
     * @return object[]|null
     */
    public function getAggregations()
    {
        return $this->container['aggregations'];
    }

    /**
     * Sets aggregations
     *
     * @param object[]|null $aggregations Contains aggregated data. A simple example is the determination of the average price from a product search query.
     *
     * @return self
     */
    public function setAggregations($aggregations)
    {
        $this->container['aggregations'] = $aggregations;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int|null
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int|null $page The actual page. This can be used for pagination.
     *
     * @return self
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit The actual limit. This is used for pagination and goes together with the page.
     *
     * @return self
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets current_filters
     *
     * @return \ServeXS\Shopware\v6\Store\Model\ProductListingResultAllOfCurrentFilters|null
     */
    public function getCurrentFilters()
    {
        return $this->container['current_filters'];
    }

    /**
     * Sets current_filters
     *
     * @param \ServeXS\Shopware\v6\Store\Model\ProductListingResultAllOfCurrentFilters|null $current_filters current_filters
     *
     * @return self
     */
    public function setCurrentFilters($current_filters)
    {
        $this->container['current_filters'] = $current_filters;

        return $this;
    }

    /**
     * Gets available_sortings
     *
     * @return object[]|null
     */
    public function getAvailableSortings()
    {
        return $this->container['available_sortings'];
    }

    /**
     * Sets available_sortings
     *
     * @param object[]|null $available_sortings Contains the available sorting. These can be used to show a sorting select-box in the product listing.
     *
     * @return self
     */
    public function setAvailableSortings($available_sortings)
    {
        $this->container['available_sortings'] = $available_sortings;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return string|null
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param string|null $sorting sorting
     *
     * @return self
     */
    public function setSorting($sorting)
    {
        $this->container['sorting'] = $sorting;

        return $this;
    }

    /**
     * Gets elements
     *
     * @return \ServeXS\Shopware\v6\Store\Model\Product[]|null
     */
    public function getElements()
    {
        return $this->container['elements'];
    }

    /**
     * Sets elements
     *
     * @param \ServeXS\Shopware\v6\Store\Model\Product[]|null $elements elements
     *
     * @return self
     */
    public function setElements($elements)
    {
        $this->container['elements'] = $elements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


