<?php
/**
 * SalesChannelContextAllOfPaymentMethod
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ServeXS\Shopware\v6\Store\Model;

use \ArrayAccess;
use \ServeXS\Shopware\v6\Store\ObjectSerializer;

/**
 * SalesChannelContextAllOfPaymentMethod Class Doc Comment
 *
 * @category Class
 * @description Selected payment method
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SalesChannelContextAllOfPaymentMethod implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SalesChannelContext_allOf_paymentMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'plugin_id' => 'string',
        'handler_identifier' => 'string',
        'name' => 'string',
        'description' => 'string',
        'position' => 'int',
        'active' => 'bool',
        'availability_rule_id' => 'string',
        'media_id' => 'string',
        'formatted_handler_identifier' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'plugin_id' => null,
        'handler_identifier' => null,
        'name' => null,
        'description' => null,
        'position' => 'int32',
        'active' => null,
        'availability_rule_id' => null,
        'media_id' => null,
        'formatted_handler_identifier' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plugin_id' => 'pluginId',
        'handler_identifier' => 'handlerIdentifier',
        'name' => 'name',
        'description' => 'description',
        'position' => 'position',
        'active' => 'active',
        'availability_rule_id' => 'availabilityRuleId',
        'media_id' => 'mediaId',
        'formatted_handler_identifier' => 'formattedHandlerIdentifier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plugin_id' => 'setPluginId',
        'handler_identifier' => 'setHandlerIdentifier',
        'name' => 'setName',
        'description' => 'setDescription',
        'position' => 'setPosition',
        'active' => 'setActive',
        'availability_rule_id' => 'setAvailabilityRuleId',
        'media_id' => 'setMediaId',
        'formatted_handler_identifier' => 'setFormattedHandlerIdentifier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plugin_id' => 'getPluginId',
        'handler_identifier' => 'getHandlerIdentifier',
        'name' => 'getName',
        'description' => 'getDescription',
        'position' => 'getPosition',
        'active' => 'getActive',
        'availability_rule_id' => 'getAvailabilityRuleId',
        'media_id' => 'getMediaId',
        'formatted_handler_identifier' => 'getFormattedHandlerIdentifier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plugin_id'] = $data['plugin_id'] ?? null;
        $this->container['handler_identifier'] = $data['handler_identifier'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['position'] = $data['position'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['availability_rule_id'] = $data['availability_rule_id'] ?? null;
        $this->container['media_id'] = $data['media_id'] ?? null;
        $this->container['formatted_handler_identifier'] = $data['formatted_handler_identifier'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plugin_id
     *
     * @return string|null
     */
    public function getPluginId()
    {
        return $this->container['plugin_id'];
    }

    /**
     * Sets plugin_id
     *
     * @param string|null $plugin_id plugin_id
     *
     * @return self
     */
    public function setPluginId($plugin_id)
    {
        $this->container['plugin_id'] = $plugin_id;

        return $this;
    }

    /**
     * Gets handler_identifier
     *
     * @return string|null
     */
    public function getHandlerIdentifier()
    {
        return $this->container['handler_identifier'];
    }

    /**
     * Sets handler_identifier
     *
     * @param string|null $handler_identifier handler_identifier
     *
     * @return self
     */
    public function setHandlerIdentifier($handler_identifier)
    {
        $this->container['handler_identifier'] = $handler_identifier;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets availability_rule_id
     *
     * @return string|null
     */
    public function getAvailabilityRuleId()
    {
        return $this->container['availability_rule_id'];
    }

    /**
     * Sets availability_rule_id
     *
     * @param string|null $availability_rule_id availability_rule_id
     *
     * @return self
     */
    public function setAvailabilityRuleId($availability_rule_id)
    {
        $this->container['availability_rule_id'] = $availability_rule_id;

        return $this;
    }

    /**
     * Gets media_id
     *
     * @return string|null
     */
    public function getMediaId()
    {
        return $this->container['media_id'];
    }

    /**
     * Sets media_id
     *
     * @param string|null $media_id media_id
     *
     * @return self
     */
    public function setMediaId($media_id)
    {
        $this->container['media_id'] = $media_id;

        return $this;
    }

    /**
     * Gets formatted_handler_identifier
     *
     * @return string|null
     */
    public function getFormattedHandlerIdentifier()
    {
        return $this->container['formatted_handler_identifier'];
    }

    /**
     * Sets formatted_handler_identifier
     *
     * @param string|null $formatted_handler_identifier formatted_handler_identifier
     *
     * @return self
     */
    public function setFormattedHandlerIdentifier($formatted_handler_identifier)
    {
        $this->container['formatted_handler_identifier'] = $formatted_handler_identifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


