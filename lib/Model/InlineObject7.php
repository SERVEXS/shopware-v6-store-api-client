<?php
/**
 * InlineObject7
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ServeXS\Shopware\v6\Store\Model;

use \ArrayAccess;
use \ServeXS\Shopware\v6\Store\ObjectSerializer;

/**
 * InlineObject7 Class Doc Comment
 *
 * @category Class
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineObject7 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_7';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'password' => 'string',
        'salutation_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'accepted_data_protection' => 'bool',
        'storefront_url' => 'string',
        'billing_address' => '\ServeXS\Shopware\v6\Store\Model\CustomerAddress',
        'shipping_address' => '\ServeXS\Shopware\v6\Store\Model\CustomerAddress',
        'account_type' => 'string',
        'guest' => 'bool',
        'birthday_day' => 'int',
        'birthday_month' => 'int',
        'birthday_year' => 'int',
        'title' => 'string',
        'affiliate_code' => 'string',
        'campaign_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => null,
        'password' => null,
        'salutation_id' => null,
        'first_name' => null,
        'last_name' => null,
        'accepted_data_protection' => null,
        'storefront_url' => null,
        'billing_address' => null,
        'shipping_address' => null,
        'account_type' => null,
        'guest' => null,
        'birthday_day' => null,
        'birthday_month' => null,
        'birthday_year' => null,
        'title' => null,
        'affiliate_code' => null,
        'campaign_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'password' => 'password',
        'salutation_id' => 'salutationId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'accepted_data_protection' => 'acceptedDataProtection',
        'storefront_url' => 'storefrontUrl',
        'billing_address' => 'billingAddress',
        'shipping_address' => 'shippingAddress',
        'account_type' => 'accountType',
        'guest' => 'guest',
        'birthday_day' => 'birthdayDay',
        'birthday_month' => 'birthdayMonth',
        'birthday_year' => 'birthdayYear',
        'title' => 'title',
        'affiliate_code' => 'affiliateCode',
        'campaign_code' => 'campaignCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'password' => 'setPassword',
        'salutation_id' => 'setSalutationId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'accepted_data_protection' => 'setAcceptedDataProtection',
        'storefront_url' => 'setStorefrontUrl',
        'billing_address' => 'setBillingAddress',
        'shipping_address' => 'setShippingAddress',
        'account_type' => 'setAccountType',
        'guest' => 'setGuest',
        'birthday_day' => 'setBirthdayDay',
        'birthday_month' => 'setBirthdayMonth',
        'birthday_year' => 'setBirthdayYear',
        'title' => 'setTitle',
        'affiliate_code' => 'setAffiliateCode',
        'campaign_code' => 'setCampaignCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'password' => 'getPassword',
        'salutation_id' => 'getSalutationId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'accepted_data_protection' => 'getAcceptedDataProtection',
        'storefront_url' => 'getStorefrontUrl',
        'billing_address' => 'getBillingAddress',
        'shipping_address' => 'getShippingAddress',
        'account_type' => 'getAccountType',
        'guest' => 'getGuest',
        'birthday_day' => 'getBirthdayDay',
        'birthday_month' => 'getBirthdayMonth',
        'birthday_year' => 'getBirthdayYear',
        'title' => 'getTitle',
        'affiliate_code' => 'getAffiliateCode',
        'campaign_code' => 'getCampaignCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = $data['email'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['salutation_id'] = $data['salutation_id'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['accepted_data_protection'] = $data['accepted_data_protection'] ?? null;
        $this->container['storefront_url'] = $data['storefront_url'] ?? null;
        $this->container['billing_address'] = $data['billing_address'] ?? null;
        $this->container['shipping_address'] = $data['shipping_address'] ?? null;
        $this->container['account_type'] = $data['account_type'] ?? 'private';
        $this->container['guest'] = $data['guest'] ?? false;
        $this->container['birthday_day'] = $data['birthday_day'] ?? null;
        $this->container['birthday_month'] = $data['birthday_month'] ?? null;
        $this->container['birthday_year'] = $data['birthday_year'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['affiliate_code'] = $data['affiliate_code'] ?? null;
        $this->container['campaign_code'] = $data['campaign_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ($this->container['salutation_id'] === null) {
            $invalidProperties[] = "'salutation_id' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['accepted_data_protection'] === null) {
            $invalidProperties[] = "'accepted_data_protection' can't be null";
        }
        if ($this->container['storefront_url'] === null) {
            $invalidProperties[] = "'storefront_url' can't be null";
        }
        if ($this->container['billing_address'] === null) {
            $invalidProperties[] = "'billing_address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email of the customer. Has to be unique, unless `guest` is `true`
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Password for the customer. Required, unless `guest` is `true`
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets salutation_id
     *
     * @return string
     */
    public function getSalutationId()
    {
        return $this->container['salutation_id'];
    }

    /**
     * Sets salutation_id
     *
     * @param string $salutation_id Id of the salutation for the customer account. Fetch options using `salutation` endpoint.
     *
     * @return self
     */
    public function setSalutationId($salutation_id)
    {
        $this->container['salutation_id'] = $salutation_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name Customer first name. Value will be reused for shipping and billing address if not provided explicitly.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Customer last name. Value will be reused for shipping and billing address if not provided explicitly.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets accepted_data_protection
     *
     * @return bool
     */
    public function getAcceptedDataProtection()
    {
        return $this->container['accepted_data_protection'];
    }

    /**
     * Sets accepted_data_protection
     *
     * @param bool $accepted_data_protection Flag indicating accepted data protection
     *
     * @return self
     */
    public function setAcceptedDataProtection($accepted_data_protection)
    {
        $this->container['accepted_data_protection'] = $accepted_data_protection;

        return $this;
    }

    /**
     * Gets storefront_url
     *
     * @return string
     */
    public function getStorefrontUrl()
    {
        return $this->container['storefront_url'];
    }

    /**
     * Sets storefront_url
     *
     * @param string $storefront_url URL of the storefront for that registration. Used in confirmation emails. Has to be one of the configured domains of the sales channel.
     *
     * @return self
     */
    public function setStorefrontUrl($storefront_url)
    {
        $this->container['storefront_url'] = $storefront_url;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \ServeXS\Shopware\v6\Store\Model\CustomerAddress
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \ServeXS\Shopware\v6\Store\Model\CustomerAddress $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \ServeXS\Shopware\v6\Store\Model\CustomerAddress|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \ServeXS\Shopware\v6\Store\Model\CustomerAddress|null $shipping_address shipping_address
     *
     * @return self
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type Account type of the customer which can be either `private` or `business`.
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets guest
     *
     * @return bool|null
     */
    public function getGuest()
    {
        return $this->container['guest'];
    }

    /**
     * Sets guest
     *
     * @param bool|null $guest If set, will create a guest customer. Guest customers can re-use an email address and don't need a password.
     *
     * @return self
     */
    public function setGuest($guest)
    {
        $this->container['guest'] = $guest;

        return $this;
    }

    /**
     * Gets birthday_day
     *
     * @return int|null
     */
    public function getBirthdayDay()
    {
        return $this->container['birthday_day'];
    }

    /**
     * Sets birthday_day
     *
     * @param int|null $birthday_day Birthday day
     *
     * @return self
     */
    public function setBirthdayDay($birthday_day)
    {
        $this->container['birthday_day'] = $birthday_day;

        return $this;
    }

    /**
     * Gets birthday_month
     *
     * @return int|null
     */
    public function getBirthdayMonth()
    {
        return $this->container['birthday_month'];
    }

    /**
     * Sets birthday_month
     *
     * @param int|null $birthday_month Birthday month
     *
     * @return self
     */
    public function setBirthdayMonth($birthday_month)
    {
        $this->container['birthday_month'] = $birthday_month;

        return $this;
    }

    /**
     * Gets birthday_year
     *
     * @return int|null
     */
    public function getBirthdayYear()
    {
        return $this->container['birthday_year'];
    }

    /**
     * Sets birthday_year
     *
     * @param int|null $birthday_year Birthday year
     *
     * @return self
     */
    public function setBirthdayYear($birthday_year)
    {
        $this->container['birthday_year'] = $birthday_year;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title (Academic) title of the customer
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets affiliate_code
     *
     * @return string|null
     */
    public function getAffiliateCode()
    {
        return $this->container['affiliate_code'];
    }

    /**
     * Sets affiliate_code
     *
     * @param string|null $affiliate_code Field can be used to store an affiliate tracking code
     *
     * @return self
     */
    public function setAffiliateCode($affiliate_code)
    {
        $this->container['affiliate_code'] = $affiliate_code;

        return $this;
    }

    /**
     * Gets campaign_code
     *
     * @return string|null
     */
    public function getCampaignCode()
    {
        return $this->container['campaign_code'];
    }

    /**
     * Sets campaign_code
     *
     * @param string|null $campaign_code Field can be used to store a campaign tracking code
     *
     * @return self
     */
    public function setCampaignCode($campaign_code)
    {
        $this->container['campaign_code'] = $campaign_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


