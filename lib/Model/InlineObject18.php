<?php
/**
 * InlineObject18
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ServeXS\Shopware\v6\Store\Model;

use \ArrayAccess;
use \ServeXS\Shopware\v6\Store\ObjectSerializer;

/**
 * InlineObject18 Class Doc Comment
 *
 * @category Class
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineObject18 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_18';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currency_id' => 'string',
        'language_id' => 'string',
        'billing_address_id' => 'string',
        'shipping_address_id' => 'string',
        'payment_method_id' => 'string',
        'shipping_method_id' => 'string',
        'country_id' => 'string',
        'country_state_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currency_id' => null,
        'language_id' => null,
        'billing_address_id' => null,
        'shipping_address_id' => null,
        'payment_method_id' => null,
        'shipping_method_id' => null,
        'country_id' => null,
        'country_state_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_id' => 'currencyId',
        'language_id' => 'languageId',
        'billing_address_id' => 'billingAddressId',
        'shipping_address_id' => 'shippingAddressId',
        'payment_method_id' => 'paymentMethodId',
        'shipping_method_id' => 'shippingMethodId',
        'country_id' => 'countryId',
        'country_state_id' => 'countryStateId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_id' => 'setCurrencyId',
        'language_id' => 'setLanguageId',
        'billing_address_id' => 'setBillingAddressId',
        'shipping_address_id' => 'setShippingAddressId',
        'payment_method_id' => 'setPaymentMethodId',
        'shipping_method_id' => 'setShippingMethodId',
        'country_id' => 'setCountryId',
        'country_state_id' => 'setCountryStateId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_id' => 'getCurrencyId',
        'language_id' => 'getLanguageId',
        'billing_address_id' => 'getBillingAddressId',
        'shipping_address_id' => 'getShippingAddressId',
        'payment_method_id' => 'getPaymentMethodId',
        'shipping_method_id' => 'getShippingMethodId',
        'country_id' => 'getCountryId',
        'country_state_id' => 'getCountryStateId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_id'] = $data['currency_id'] ?? null;
        $this->container['language_id'] = $data['language_id'] ?? null;
        $this->container['billing_address_id'] = $data['billing_address_id'] ?? null;
        $this->container['shipping_address_id'] = $data['shipping_address_id'] ?? null;
        $this->container['payment_method_id'] = $data['payment_method_id'] ?? null;
        $this->container['shipping_method_id'] = $data['shipping_method_id'] ?? null;
        $this->container['country_id'] = $data['country_id'] ?? null;
        $this->container['country_state_id'] = $data['country_state_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['currency_id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['currency_id'])) {
            $invalidProperties[] = "invalid value for 'currency_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if (!is_null($this->container['language_id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['language_id'])) {
            $invalidProperties[] = "invalid value for 'language_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if (!is_null($this->container['billing_address_id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['billing_address_id'])) {
            $invalidProperties[] = "invalid value for 'billing_address_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if (!is_null($this->container['shipping_address_id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['shipping_address_id'])) {
            $invalidProperties[] = "invalid value for 'shipping_address_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if (!is_null($this->container['payment_method_id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['payment_method_id'])) {
            $invalidProperties[] = "invalid value for 'payment_method_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if (!is_null($this->container['shipping_method_id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['shipping_method_id'])) {
            $invalidProperties[] = "invalid value for 'shipping_method_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if (!is_null($this->container['country_id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['country_id'])) {
            $invalidProperties[] = "invalid value for 'country_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if (!is_null($this->container['country_state_id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['country_state_id'])) {
            $invalidProperties[] = "invalid value for 'country_state_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id Currency
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {

        if (!is_null($currency_id) && (!preg_match("/^[0-9a-f]{32}$/", $currency_id))) {
            throw new \InvalidArgumentException("invalid value for $currency_id when calling InlineObject18., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets language_id
     *
     * @return string|null
     */
    public function getLanguageId()
    {
        return $this->container['language_id'];
    }

    /**
     * Sets language_id
     *
     * @param string|null $language_id Language
     *
     * @return self
     */
    public function setLanguageId($language_id)
    {

        if (!is_null($language_id) && (!preg_match("/^[0-9a-f]{32}$/", $language_id))) {
            throw new \InvalidArgumentException("invalid value for $language_id when calling InlineObject18., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['language_id'] = $language_id;

        return $this;
    }

    /**
     * Gets billing_address_id
     *
     * @return string|null
     */
    public function getBillingAddressId()
    {
        return $this->container['billing_address_id'];
    }

    /**
     * Sets billing_address_id
     *
     * @param string|null $billing_address_id Billing Address
     *
     * @return self
     */
    public function setBillingAddressId($billing_address_id)
    {

        if (!is_null($billing_address_id) && (!preg_match("/^[0-9a-f]{32}$/", $billing_address_id))) {
            throw new \InvalidArgumentException("invalid value for $billing_address_id when calling InlineObject18., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['billing_address_id'] = $billing_address_id;

        return $this;
    }

    /**
     * Gets shipping_address_id
     *
     * @return string|null
     */
    public function getShippingAddressId()
    {
        return $this->container['shipping_address_id'];
    }

    /**
     * Sets shipping_address_id
     *
     * @param string|null $shipping_address_id Shipping Address
     *
     * @return self
     */
    public function setShippingAddressId($shipping_address_id)
    {

        if (!is_null($shipping_address_id) && (!preg_match("/^[0-9a-f]{32}$/", $shipping_address_id))) {
            throw new \InvalidArgumentException("invalid value for $shipping_address_id when calling InlineObject18., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['shipping_address_id'] = $shipping_address_id;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id Payment Method
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {

        if (!is_null($payment_method_id) && (!preg_match("/^[0-9a-f]{32}$/", $payment_method_id))) {
            throw new \InvalidArgumentException("invalid value for $payment_method_id when calling InlineObject18., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets shipping_method_id
     *
     * @return string|null
     */
    public function getShippingMethodId()
    {
        return $this->container['shipping_method_id'];
    }

    /**
     * Sets shipping_method_id
     *
     * @param string|null $shipping_method_id Shipping Method
     *
     * @return self
     */
    public function setShippingMethodId($shipping_method_id)
    {

        if (!is_null($shipping_method_id) && (!preg_match("/^[0-9a-f]{32}$/", $shipping_method_id))) {
            throw new \InvalidArgumentException("invalid value for $shipping_method_id when calling InlineObject18., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['shipping_method_id'] = $shipping_method_id;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string|null
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string|null $country_id Country
     *
     * @return self
     */
    public function setCountryId($country_id)
    {

        if (!is_null($country_id) && (!preg_match("/^[0-9a-f]{32}$/", $country_id))) {
            throw new \InvalidArgumentException("invalid value for $country_id when calling InlineObject18., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets country_state_id
     *
     * @return string|null
     */
    public function getCountryStateId()
    {
        return $this->container['country_state_id'];
    }

    /**
     * Sets country_state_id
     *
     * @param string|null $country_state_id Country State
     *
     * @return self
     */
    public function setCountryStateId($country_state_id)
    {

        if (!is_null($country_state_id) && (!preg_match("/^[0-9a-f]{32}$/", $country_state_id))) {
            throw new \InvalidArgumentException("invalid value for $country_state_id when calling InlineObject18., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['country_state_id'] = $country_state_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


