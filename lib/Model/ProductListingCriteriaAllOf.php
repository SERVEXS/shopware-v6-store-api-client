<?php
/**
 * ProductListingCriteriaAllOf
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ServeXS\Shopware\v6\Store\Model;

use \ArrayAccess;
use \ServeXS\Shopware\v6\Store\ObjectSerializer;

/**
 * ProductListingCriteriaAllOf Class Doc Comment
 *
 * @category Class
 * @description Additional search parameters for product listings
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ProductListingCriteriaAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductListingCriteria_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order' => 'string',
        'limit' => 'int',
        'p' => 'int',
        'manufacturer' => 'string',
        'min_price' => 'int',
        'max_price' => 'int',
        'rating' => 'int',
        'shipping_free' => 'bool',
        'properties' => 'string',
        'manufacturer_filter' => 'bool',
        'price_filter' => 'bool',
        'rating_filter' => 'bool',
        'shipping_free_filter' => 'bool',
        'property_filter' => 'bool',
        'property_whitelist' => 'string',
        'reduce_aggregations' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order' => null,
        'limit' => null,
        'p' => null,
        'manufacturer' => null,
        'min_price' => null,
        'max_price' => null,
        'rating' => null,
        'shipping_free' => null,
        'properties' => null,
        'manufacturer_filter' => null,
        'price_filter' => null,
        'rating_filter' => null,
        'shipping_free_filter' => null,
        'property_filter' => null,
        'property_whitelist' => null,
        'reduce_aggregations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order' => 'order',
        'limit' => 'limit',
        'p' => 'p',
        'manufacturer' => 'manufacturer',
        'min_price' => 'min-price',
        'max_price' => 'max-price',
        'rating' => 'rating',
        'shipping_free' => 'shipping-free',
        'properties' => 'properties',
        'manufacturer_filter' => 'manufacturer-filter',
        'price_filter' => 'price-filter',
        'rating_filter' => 'rating-filter',
        'shipping_free_filter' => 'shipping-free-filter',
        'property_filter' => 'property-filter',
        'property_whitelist' => 'property-whitelist',
        'reduce_aggregations' => 'reduce-aggregations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order' => 'setOrder',
        'limit' => 'setLimit',
        'p' => 'setP',
        'manufacturer' => 'setManufacturer',
        'min_price' => 'setMinPrice',
        'max_price' => 'setMaxPrice',
        'rating' => 'setRating',
        'shipping_free' => 'setShippingFree',
        'properties' => 'setProperties',
        'manufacturer_filter' => 'setManufacturerFilter',
        'price_filter' => 'setPriceFilter',
        'rating_filter' => 'setRatingFilter',
        'shipping_free_filter' => 'setShippingFreeFilter',
        'property_filter' => 'setPropertyFilter',
        'property_whitelist' => 'setPropertyWhitelist',
        'reduce_aggregations' => 'setReduceAggregations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order' => 'getOrder',
        'limit' => 'getLimit',
        'p' => 'getP',
        'manufacturer' => 'getManufacturer',
        'min_price' => 'getMinPrice',
        'max_price' => 'getMaxPrice',
        'rating' => 'getRating',
        'shipping_free' => 'getShippingFree',
        'properties' => 'getProperties',
        'manufacturer_filter' => 'getManufacturerFilter',
        'price_filter' => 'getPriceFilter',
        'rating_filter' => 'getRatingFilter',
        'shipping_free_filter' => 'getShippingFreeFilter',
        'property_filter' => 'getPropertyFilter',
        'property_whitelist' => 'getPropertyWhitelist',
        'reduce_aggregations' => 'getReduceAggregations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order'] = $data['order'] ?? null;
        $this->container['limit'] = $data['limit'] ?? null;
        $this->container['p'] = $data['p'] ?? 1;
        $this->container['manufacturer'] = $data['manufacturer'] ?? null;
        $this->container['min_price'] = $data['min_price'] ?? 0;
        $this->container['max_price'] = $data['max_price'] ?? 0;
        $this->container['rating'] = $data['rating'] ?? null;
        $this->container['shipping_free'] = $data['shipping_free'] ?? false;
        $this->container['properties'] = $data['properties'] ?? null;
        $this->container['manufacturer_filter'] = $data['manufacturer_filter'] ?? true;
        $this->container['price_filter'] = $data['price_filter'] ?? true;
        $this->container['rating_filter'] = $data['rating_filter'] ?? true;
        $this->container['shipping_free_filter'] = $data['shipping_free_filter'] ?? true;
        $this->container['property_filter'] = $data['property_filter'] ?? true;
        $this->container['property_whitelist'] = $data['property_whitelist'] ?? null;
        $this->container['reduce_aggregations'] = $data['reduce_aggregations'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['limit']) && ($this->container['limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'limit', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['min_price']) && ($this->container['min_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'min_price', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_price']) && ($this->container['max_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_price', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order
     *
     * @return string|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string|null $order Specifies the sorting of the products by `availableSortings`. If not set, the default sorting will be set according to the shop settings. The available sorting options are sent within the response under the `availableSortings` key. In order to sort by a field, consider using the `sort` parameter from the listing criteria. Do not use both parameters together, as it might lead to unexpected results.
     *
     * @return self
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit Number of items per result page. If not set, the limit will be set according to the default products per page, defined in the system settings.
     *
     * @return self
     */
    public function setLimit($limit)
    {

        if (!is_null($limit) && ($limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $limit when calling ProductListingCriteriaAllOf., must be bigger than or equal to 0.');
        }

        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets p
     *
     * @return int|null
     */
    public function getP()
    {
        return $this->container['p'];
    }

    /**
     * Sets p
     *
     * @param int|null $p Search result page
     *
     * @return self
     */
    public function setP($p)
    {
        $this->container['p'] = $p;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string|null
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string|null $manufacturer Filter by manufacturers. List of manufacturer identifiers separated by a `|`.
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets min_price
     *
     * @return int|null
     */
    public function getMinPrice()
    {
        return $this->container['min_price'];
    }

    /**
     * Sets min_price
     *
     * @param int|null $min_price Filters by a minimum product price. Has to be lower than the `max-price` filter.
     *
     * @return self
     */
    public function setMinPrice($min_price)
    {

        if (!is_null($min_price) && ($min_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $min_price when calling ProductListingCriteriaAllOf., must be bigger than or equal to 0.');
        }

        $this->container['min_price'] = $min_price;

        return $this;
    }

    /**
     * Gets max_price
     *
     * @return int|null
     */
    public function getMaxPrice()
    {
        return $this->container['max_price'];
    }

    /**
     * Sets max_price
     *
     * @param int|null $max_price Filters by a maximum product price. Has to be higher than the `min-price` filter.
     *
     * @return self
     */
    public function setMaxPrice($max_price)
    {

        if (!is_null($max_price) && ($max_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_price when calling ProductListingCriteriaAllOf., must be bigger than or equal to 0.');
        }

        $this->container['max_price'] = $max_price;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return int|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param int|null $rating Filter products with a minimum average rating.
     *
     * @return self
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets shipping_free
     *
     * @return bool|null
     */
    public function getShippingFree()
    {
        return $this->container['shipping_free'];
    }

    /**
     * Sets shipping_free
     *
     * @param bool|null $shipping_free Filters products that are marked as shipping-free.
     *
     * @return self
     */
    public function setShippingFree($shipping_free)
    {
        $this->container['shipping_free'] = $shipping_free;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return string|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param string|null $properties Filters products by their properties. List of property identifiers separated by a `|`.
     *
     * @return self
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets manufacturer_filter
     *
     * @return bool|null
     */
    public function getManufacturerFilter()
    {
        return $this->container['manufacturer_filter'];
    }

    /**
     * Sets manufacturer_filter
     *
     * @param bool|null $manufacturer_filter Enables/disabled filtering by manufacturer. If set to false, the `manufacturer` filter will be ignored. Also the `aggregations[manufacturer]` key will be removed from the response.
     *
     * @return self
     */
    public function setManufacturerFilter($manufacturer_filter)
    {
        $this->container['manufacturer_filter'] = $manufacturer_filter;

        return $this;
    }

    /**
     * Gets price_filter
     *
     * @return bool|null
     */
    public function getPriceFilter()
    {
        return $this->container['price_filter'];
    }

    /**
     * Sets price_filter
     *
     * @param bool|null $price_filter Enables/disabled filtering by price. If set to false, the `min-price` and `max-price` filter will be ignored. Also the `aggregations[price]` key will be removed from the response.
     *
     * @return self
     */
    public function setPriceFilter($price_filter)
    {
        $this->container['price_filter'] = $price_filter;

        return $this;
    }

    /**
     * Gets rating_filter
     *
     * @return bool|null
     */
    public function getRatingFilter()
    {
        return $this->container['rating_filter'];
    }

    /**
     * Sets rating_filter
     *
     * @param bool|null $rating_filter Enables/disabled filtering by rating. If set to false, the `rating` filter will be ignored. Also the `aggregations[rating]` key will be removed from the response.
     *
     * @return self
     */
    public function setRatingFilter($rating_filter)
    {
        $this->container['rating_filter'] = $rating_filter;

        return $this;
    }

    /**
     * Gets shipping_free_filter
     *
     * @return bool|null
     */
    public function getShippingFreeFilter()
    {
        return $this->container['shipping_free_filter'];
    }

    /**
     * Sets shipping_free_filter
     *
     * @param bool|null $shipping_free_filter Enables/disabled filtering by shipping-free products. If set to false, the `shipping-free` filter will be ignored. Also the `aggregations[shipping-free]` key will be removed from the response.
     *
     * @return self
     */
    public function setShippingFreeFilter($shipping_free_filter)
    {
        $this->container['shipping_free_filter'] = $shipping_free_filter;

        return $this;
    }

    /**
     * Gets property_filter
     *
     * @return bool|null
     */
    public function getPropertyFilter()
    {
        return $this->container['property_filter'];
    }

    /**
     * Sets property_filter
     *
     * @param bool|null $property_filter Enables/disabled filtering by properties products. If set to false, the `properties` filter will be ignored. Also the `aggregations[properties]` key will be removed from the response.
     *
     * @return self
     */
    public function setPropertyFilter($property_filter)
    {
        $this->container['property_filter'] = $property_filter;

        return $this;
    }

    /**
     * Gets property_whitelist
     *
     * @return string|null
     */
    public function getPropertyWhitelist()
    {
        return $this->container['property_whitelist'];
    }

    /**
     * Sets property_whitelist
     *
     * @param string|null $property_whitelist A whitelist of property identifiers which can be used for filtering. List of property identifiers separated by a `|`. The `property-filter` must be `true`, otherwise the whitelist has no effect.
     *
     * @return self
     */
    public function setPropertyWhitelist($property_whitelist)
    {
        $this->container['property_whitelist'] = $property_whitelist;

        return $this;
    }

    /**
     * Gets reduce_aggregations
     *
     * @return string|null
     */
    public function getReduceAggregations()
    {
        return $this->container['reduce_aggregations'];
    }

    /**
     * Sets reduce_aggregations
     *
     * @param string|null $reduce_aggregations By sending the parameter `reduce-aggregations` , the post-filters that were applied by the customer, are also applied to the aggregations. This has the consequence that only values are returned in the aggregations that would lead to further filter results. This parameter is a flag, the value has no effect.
     *
     * @return self
     */
    public function setReduceAggregations($reduce_aggregations)
    {
        $this->container['reduce_aggregations'] = $reduce_aggregations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


