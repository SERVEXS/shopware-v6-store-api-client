<?php
/**
 * NewsletterApi
 * PHP version 7.3
 *
 * @category Class
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ServeXS\Shopware\v6\Store\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ServeXS\Shopware\v6\Store\ApiException;
use ServeXS\Shopware\v6\Store\Configuration;
use ServeXS\Shopware\v6\Store\HeaderSelector;
use ServeXS\Shopware\v6\Store\ObjectSerializer;

/**
 * NewsletterApi Class Doc Comment
 *
 * @category Class
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewsletterApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation confirmNewsletter
     *
     * Confirm a newsletter registration
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject14 $inline_object14 inline_object14 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function confirmNewsletter($content_type, $accept, $inline_object14)
    {
        $this->confirmNewsletterWithHttpInfo($content_type, $accept, $inline_object14);
    }

    /**
     * Operation confirmNewsletterWithHttpInfo
     *
     * Confirm a newsletter registration
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject14 $inline_object14 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmNewsletterWithHttpInfo($content_type, $accept, $inline_object14)
    {
        $request = $this->confirmNewsletterRequest($content_type, $accept, $inline_object14);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation confirmNewsletterAsync
     *
     * Confirm a newsletter registration
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject14 $inline_object14 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmNewsletterAsync($content_type, $accept, $inline_object14)
    {
        return $this->confirmNewsletterAsyncWithHttpInfo($content_type, $accept, $inline_object14)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmNewsletterAsyncWithHttpInfo
     *
     * Confirm a newsletter registration
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject14 $inline_object14 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmNewsletterAsyncWithHttpInfo($content_type, $accept, $inline_object14)
    {
        $returnType = '';
        $request = $this->confirmNewsletterRequest($content_type, $accept, $inline_object14);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmNewsletter'
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject14 $inline_object14 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function confirmNewsletterRequest($content_type, $accept, $inline_object14)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling confirmNewsletter'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling confirmNewsletter'
            );
        }
        // verify the required parameter 'inline_object14' is set
        if ($inline_object14 === null || (is_array($inline_object14) && count($inline_object14) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_object14 when calling confirmNewsletter'
            );
        }

        $resourcePath = '/newsletter/confirm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object14)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object14));
            } else {
                $httpBody = $inline_object14;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subscribeToNewsletter
     *
     * Create or remove a newsletter subscription
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject15 $inline_object15 inline_object15 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function subscribeToNewsletter($content_type, $accept, $inline_object15)
    {
        $this->subscribeToNewsletterWithHttpInfo($content_type, $accept, $inline_object15);
    }

    /**
     * Operation subscribeToNewsletterWithHttpInfo
     *
     * Create or remove a newsletter subscription
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject15 $inline_object15 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscribeToNewsletterWithHttpInfo($content_type, $accept, $inline_object15)
    {
        $request = $this->subscribeToNewsletterRequest($content_type, $accept, $inline_object15);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation subscribeToNewsletterAsync
     *
     * Create or remove a newsletter subscription
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject15 $inline_object15 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscribeToNewsletterAsync($content_type, $accept, $inline_object15)
    {
        return $this->subscribeToNewsletterAsyncWithHttpInfo($content_type, $accept, $inline_object15)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subscribeToNewsletterAsyncWithHttpInfo
     *
     * Create or remove a newsletter subscription
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject15 $inline_object15 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscribeToNewsletterAsyncWithHttpInfo($content_type, $accept, $inline_object15)
    {
        $returnType = '';
        $request = $this->subscribeToNewsletterRequest($content_type, $accept, $inline_object15);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subscribeToNewsletter'
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject15 $inline_object15 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function subscribeToNewsletterRequest($content_type, $accept, $inline_object15)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling subscribeToNewsletter'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling subscribeToNewsletter'
            );
        }
        // verify the required parameter 'inline_object15' is set
        if ($inline_object15 === null || (is_array($inline_object15) && count($inline_object15) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_object15 when calling subscribeToNewsletter'
            );
        }

        $resourcePath = '/newsletter/subscribe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object15)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object15));
            } else {
                $httpBody = $inline_object15;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unsubscribeToNewsletter
     *
     * Remove a newsletter subscription
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject16 $inline_object16 inline_object16 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function unsubscribeToNewsletter($content_type, $accept, $inline_object16)
    {
        $this->unsubscribeToNewsletterWithHttpInfo($content_type, $accept, $inline_object16);
    }

    /**
     * Operation unsubscribeToNewsletterWithHttpInfo
     *
     * Remove a newsletter subscription
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject16 $inline_object16 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unsubscribeToNewsletterWithHttpInfo($content_type, $accept, $inline_object16)
    {
        $request = $this->unsubscribeToNewsletterRequest($content_type, $accept, $inline_object16);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation unsubscribeToNewsletterAsync
     *
     * Remove a newsletter subscription
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject16 $inline_object16 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unsubscribeToNewsletterAsync($content_type, $accept, $inline_object16)
    {
        return $this->unsubscribeToNewsletterAsyncWithHttpInfo($content_type, $accept, $inline_object16)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unsubscribeToNewsletterAsyncWithHttpInfo
     *
     * Remove a newsletter subscription
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject16 $inline_object16 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unsubscribeToNewsletterAsyncWithHttpInfo($content_type, $accept, $inline_object16)
    {
        $returnType = '';
        $request = $this->unsubscribeToNewsletterRequest($content_type, $accept, $inline_object16);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unsubscribeToNewsletter'
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject16 $inline_object16 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unsubscribeToNewsletterRequest($content_type, $accept, $inline_object16)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling unsubscribeToNewsletter'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling unsubscribeToNewsletter'
            );
        }
        // verify the required parameter 'inline_object16' is set
        if ($inline_object16 === null || (is_array($inline_object16) && count($inline_object16) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_object16 when calling unsubscribeToNewsletter'
            );
        }

        $resourcePath = '/newsletter/unsubscribe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object16)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object16));
            } else {
                $httpBody = $inline_object16;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
