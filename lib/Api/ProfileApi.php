<?php
/**
 * ProfileApi
 * PHP version 7.3
 *
 * @category Class
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.4.9999999.9999999-dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ServeXS\Shopware\v6\Store\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ServeXS\Shopware\v6\Store\ApiException;
use ServeXS\Shopware\v6\Store\Configuration;
use ServeXS\Shopware\v6\Store\HeaderSelector;
use ServeXS\Shopware\v6\Store\ObjectSerializer;

/**
 * ProfileApi Class Doc Comment
 *
 * @category Class
 * @package  ServeXS\Shopware\v6\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProfileApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation changeEmail
     *
     * Change the customer&#39;s email address
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject2 $inline_object2 inline_object2 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ServeXS\Shopware\v6\Store\Model\SuccessResponse
     */
    public function changeEmail($content_type, $accept, $inline_object2)
    {
        list($response) = $this->changeEmailWithHttpInfo($content_type, $accept, $inline_object2);
        return $response;
    }

    /**
     * Operation changeEmailWithHttpInfo
     *
     * Change the customer&#39;s email address
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject2 $inline_object2 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ServeXS\Shopware\v6\Store\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeEmailWithHttpInfo($content_type, $accept, $inline_object2)
    {
        $request = $this->changeEmailRequest($content_type, $accept, $inline_object2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ServeXS\Shopware\v6\Store\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ServeXS\Shopware\v6\Store\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ServeXS\Shopware\v6\Store\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ServeXS\Shopware\v6\Store\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changeEmailAsync
     *
     * Change the customer&#39;s email address
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject2 $inline_object2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeEmailAsync($content_type, $accept, $inline_object2)
    {
        return $this->changeEmailAsyncWithHttpInfo($content_type, $accept, $inline_object2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changeEmailAsyncWithHttpInfo
     *
     * Change the customer&#39;s email address
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject2 $inline_object2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeEmailAsyncWithHttpInfo($content_type, $accept, $inline_object2)
    {
        $returnType = '\ServeXS\Shopware\v6\Store\Model\SuccessResponse';
        $request = $this->changeEmailRequest($content_type, $accept, $inline_object2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changeEmail'
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject2 $inline_object2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changeEmailRequest($content_type, $accept, $inline_object2)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling changeEmail'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling changeEmail'
            );
        }
        // verify the required parameter 'inline_object2' is set
        if ($inline_object2 === null || (is_array($inline_object2) && count($inline_object2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_object2 when calling changeEmail'
            );
        }

        $resourcePath = '/account/change-email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object2)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object2));
            } else {
                $httpBody = $inline_object2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-context-token');
        if ($apiKey !== null) {
            $headers['sw-context-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changePassword
     *
     * Change the customer&#39;s password
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject3 $inline_object3 inline_object3 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ServeXS\Shopware\v6\Store\Model\SuccessResponse
     */
    public function changePassword($content_type, $accept, $inline_object3)
    {
        list($response) = $this->changePasswordWithHttpInfo($content_type, $accept, $inline_object3);
        return $response;
    }

    /**
     * Operation changePasswordWithHttpInfo
     *
     * Change the customer&#39;s password
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject3 $inline_object3 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ServeXS\Shopware\v6\Store\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function changePasswordWithHttpInfo($content_type, $accept, $inline_object3)
    {
        $request = $this->changePasswordRequest($content_type, $accept, $inline_object3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ServeXS\Shopware\v6\Store\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ServeXS\Shopware\v6\Store\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ServeXS\Shopware\v6\Store\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ServeXS\Shopware\v6\Store\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changePasswordAsync
     *
     * Change the customer&#39;s password
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject3 $inline_object3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changePasswordAsync($content_type, $accept, $inline_object3)
    {
        return $this->changePasswordAsyncWithHttpInfo($content_type, $accept, $inline_object3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changePasswordAsyncWithHttpInfo
     *
     * Change the customer&#39;s password
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject3 $inline_object3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changePasswordAsyncWithHttpInfo($content_type, $accept, $inline_object3)
    {
        $returnType = '\ServeXS\Shopware\v6\Store\Model\SuccessResponse';
        $request = $this->changePasswordRequest($content_type, $accept, $inline_object3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changePassword'
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject3 $inline_object3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changePasswordRequest($content_type, $accept, $inline_object3)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling changePassword'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling changePassword'
            );
        }
        // verify the required parameter 'inline_object3' is set
        if ($inline_object3 === null || (is_array($inline_object3) && count($inline_object3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_object3 when calling changePassword'
            );
        }

        $resourcePath = '/account/change-password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object3)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object3));
            } else {
                $httpBody = $inline_object3;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-context-token');
        if ($apiKey !== null) {
            $headers['sw-context-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changePaymentMethod
     *
     * Change the customer&#39;s default payment method
     *
     * @param  string $payment_method_id Identifier of the desired default payment method (required)
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ServeXS\Shopware\v6\Store\Model\SuccessResponse
     */
    public function changePaymentMethod($payment_method_id, $content_type, $accept)
    {
        list($response) = $this->changePaymentMethodWithHttpInfo($payment_method_id, $content_type, $accept);
        return $response;
    }

    /**
     * Operation changePaymentMethodWithHttpInfo
     *
     * Change the customer&#39;s default payment method
     *
     * @param  string $payment_method_id Identifier of the desired default payment method (required)
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ServeXS\Shopware\v6\Store\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function changePaymentMethodWithHttpInfo($payment_method_id, $content_type, $accept)
    {
        $request = $this->changePaymentMethodRequest($payment_method_id, $content_type, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ServeXS\Shopware\v6\Store\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ServeXS\Shopware\v6\Store\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ServeXS\Shopware\v6\Store\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ServeXS\Shopware\v6\Store\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changePaymentMethodAsync
     *
     * Change the customer&#39;s default payment method
     *
     * @param  string $payment_method_id Identifier of the desired default payment method (required)
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changePaymentMethodAsync($payment_method_id, $content_type, $accept)
    {
        return $this->changePaymentMethodAsyncWithHttpInfo($payment_method_id, $content_type, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changePaymentMethodAsyncWithHttpInfo
     *
     * Change the customer&#39;s default payment method
     *
     * @param  string $payment_method_id Identifier of the desired default payment method (required)
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changePaymentMethodAsyncWithHttpInfo($payment_method_id, $content_type, $accept)
    {
        $returnType = '\ServeXS\Shopware\v6\Store\Model\SuccessResponse';
        $request = $this->changePaymentMethodRequest($payment_method_id, $content_type, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changePaymentMethod'
     *
     * @param  string $payment_method_id Identifier of the desired default payment method (required)
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changePaymentMethodRequest($payment_method_id, $content_type, $accept)
    {
        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling changePaymentMethod'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling changePaymentMethod'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling changePaymentMethod'
            );
        }

        $resourcePath = '/account/change-payment-method/{paymentMethodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-context-token');
        if ($apiKey !== null) {
            $headers['sw-context-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changeProfile
     *
     * Change the customer&#39;s information
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject1 $inline_object1 inline_object1 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ServeXS\Shopware\v6\Store\Model\SuccessResponse
     */
    public function changeProfile($content_type, $accept, $inline_object1)
    {
        list($response) = $this->changeProfileWithHttpInfo($content_type, $accept, $inline_object1);
        return $response;
    }

    /**
     * Operation changeProfileWithHttpInfo
     *
     * Change the customer&#39;s information
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject1 $inline_object1 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ServeXS\Shopware\v6\Store\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeProfileWithHttpInfo($content_type, $accept, $inline_object1)
    {
        $request = $this->changeProfileRequest($content_type, $accept, $inline_object1);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ServeXS\Shopware\v6\Store\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ServeXS\Shopware\v6\Store\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ServeXS\Shopware\v6\Store\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ServeXS\Shopware\v6\Store\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changeProfileAsync
     *
     * Change the customer&#39;s information
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject1 $inline_object1 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeProfileAsync($content_type, $accept, $inline_object1)
    {
        return $this->changeProfileAsyncWithHttpInfo($content_type, $accept, $inline_object1)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changeProfileAsyncWithHttpInfo
     *
     * Change the customer&#39;s information
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject1 $inline_object1 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeProfileAsyncWithHttpInfo($content_type, $accept, $inline_object1)
    {
        $returnType = '\ServeXS\Shopware\v6\Store\Model\SuccessResponse';
        $request = $this->changeProfileRequest($content_type, $accept, $inline_object1);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changeProfile'
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject1 $inline_object1 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changeProfileRequest($content_type, $accept, $inline_object1)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling changeProfile'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling changeProfile'
            );
        }
        // verify the required parameter 'inline_object1' is set
        if ($inline_object1 === null || (is_array($inline_object1) && count($inline_object1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_object1 when calling changeProfile'
            );
        }

        $resourcePath = '/account/change-profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object1)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object1));
            } else {
                $httpBody = $inline_object1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-context-token');
        if ($apiKey !== null) {
            $headers['sw-context-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCustomer
     *
     * Delete the customer&#39;s profile
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCustomer($content_type, $accept)
    {
        $this->deleteCustomerWithHttpInfo($content_type, $accept);
    }

    /**
     * Operation deleteCustomerWithHttpInfo
     *
     * Delete the customer&#39;s profile
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomerWithHttpInfo($content_type, $accept)
    {
        $request = $this->deleteCustomerRequest($content_type, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomerAsync
     *
     * Delete the customer&#39;s profile
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomerAsync($content_type, $accept)
    {
        return $this->deleteCustomerAsyncWithHttpInfo($content_type, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomerAsyncWithHttpInfo
     *
     * Delete the customer&#39;s profile
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomerAsyncWithHttpInfo($content_type, $accept)
    {
        $returnType = '';
        $request = $this->deleteCustomerRequest($content_type, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomer'
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCustomerRequest($content_type, $accept)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling deleteCustomer'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling deleteCustomer'
            );
        }

        $resourcePath = '/account/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-context-token');
        if ($apiKey !== null) {
            $headers['sw-context-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readCustomer
     *
     * Get information about current customer
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ServeXS\Shopware\v6\Store\Model\Customer
     */
    public function readCustomer($content_type, $accept, $unknown_base_type = null)
    {
        list($response) = $this->readCustomerWithHttpInfo($content_type, $accept, $unknown_base_type);
        return $response;
    }

    /**
     * Operation readCustomerWithHttpInfo
     *
     * Get information about current customer
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ServeXS\Shopware\v6\Store\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function readCustomerWithHttpInfo($content_type, $accept, $unknown_base_type = null)
    {
        $request = $this->readCustomerRequest($content_type, $accept, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ServeXS\Shopware\v6\Store\Model\Customer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ServeXS\Shopware\v6\Store\Model\Customer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ServeXS\Shopware\v6\Store\Model\Customer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ServeXS\Shopware\v6\Store\Model\Customer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readCustomerAsync
     *
     * Get information about current customer
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readCustomerAsync($content_type, $accept, $unknown_base_type = null)
    {
        return $this->readCustomerAsyncWithHttpInfo($content_type, $accept, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readCustomerAsyncWithHttpInfo
     *
     * Get information about current customer
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readCustomerAsyncWithHttpInfo($content_type, $accept, $unknown_base_type = null)
    {
        $returnType = '\ServeXS\Shopware\v6\Store\Model\Customer';
        $request = $this->readCustomerRequest($content_type, $accept, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readCustomer'
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readCustomerRequest($content_type, $accept, $unknown_base_type = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling readCustomer'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling readCustomer'
            );
        }

        $resourcePath = '/account/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-context-token');
        if ($apiKey !== null) {
            $headers['sw-context-token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recoveryPassword
     *
     * Reset a password with recovery credentials
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject8 $inline_object8 inline_object8 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ServeXS\Shopware\v6\Store\Model\SuccessResponse
     */
    public function recoveryPassword($content_type, $accept, $inline_object8)
    {
        list($response) = $this->recoveryPasswordWithHttpInfo($content_type, $accept, $inline_object8);
        return $response;
    }

    /**
     * Operation recoveryPasswordWithHttpInfo
     *
     * Reset a password with recovery credentials
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject8 $inline_object8 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ServeXS\Shopware\v6\Store\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function recoveryPasswordWithHttpInfo($content_type, $accept, $inline_object8)
    {
        $request = $this->recoveryPasswordRequest($content_type, $accept, $inline_object8);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ServeXS\Shopware\v6\Store\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ServeXS\Shopware\v6\Store\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ServeXS\Shopware\v6\Store\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ServeXS\Shopware\v6\Store\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recoveryPasswordAsync
     *
     * Reset a password with recovery credentials
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject8 $inline_object8 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recoveryPasswordAsync($content_type, $accept, $inline_object8)
    {
        return $this->recoveryPasswordAsyncWithHttpInfo($content_type, $accept, $inline_object8)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recoveryPasswordAsyncWithHttpInfo
     *
     * Reset a password with recovery credentials
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject8 $inline_object8 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recoveryPasswordAsyncWithHttpInfo($content_type, $accept, $inline_object8)
    {
        $returnType = '\ServeXS\Shopware\v6\Store\Model\SuccessResponse';
        $request = $this->recoveryPasswordRequest($content_type, $accept, $inline_object8);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recoveryPassword'
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject8 $inline_object8 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recoveryPasswordRequest($content_type, $accept, $inline_object8)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling recoveryPassword'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling recoveryPassword'
            );
        }
        // verify the required parameter 'inline_object8' is set
        if ($inline_object8 === null || (is_array($inline_object8) && count($inline_object8) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_object8 when calling recoveryPassword'
            );
        }

        $resourcePath = '/account/recovery-password-confirm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object8)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object8));
            } else {
                $httpBody = $inline_object8;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendRecoveryMail
     *
     * Send a password recovery mail
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject9 $inline_object9 inline_object9 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ServeXS\Shopware\v6\Store\Model\SuccessResponse
     */
    public function sendRecoveryMail($content_type, $accept, $inline_object9)
    {
        list($response) = $this->sendRecoveryMailWithHttpInfo($content_type, $accept, $inline_object9);
        return $response;
    }

    /**
     * Operation sendRecoveryMailWithHttpInfo
     *
     * Send a password recovery mail
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject9 $inline_object9 (required)
     *
     * @throws \ServeXS\Shopware\v6\Store\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ServeXS\Shopware\v6\Store\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendRecoveryMailWithHttpInfo($content_type, $accept, $inline_object9)
    {
        $request = $this->sendRecoveryMailRequest($content_type, $accept, $inline_object9);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ServeXS\Shopware\v6\Store\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ServeXS\Shopware\v6\Store\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ServeXS\Shopware\v6\Store\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ServeXS\Shopware\v6\Store\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendRecoveryMailAsync
     *
     * Send a password recovery mail
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject9 $inline_object9 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendRecoveryMailAsync($content_type, $accept, $inline_object9)
    {
        return $this->sendRecoveryMailAsyncWithHttpInfo($content_type, $accept, $inline_object9)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendRecoveryMailAsyncWithHttpInfo
     *
     * Send a password recovery mail
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject9 $inline_object9 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendRecoveryMailAsyncWithHttpInfo($content_type, $accept, $inline_object9)
    {
        $returnType = '\ServeXS\Shopware\v6\Store\Model\SuccessResponse';
        $request = $this->sendRecoveryMailRequest($content_type, $accept, $inline_object9);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendRecoveryMail'
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \ServeXS\Shopware\v6\Store\Model\InlineObject9 $inline_object9 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendRecoveryMailRequest($content_type, $accept, $inline_object9)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling sendRecoveryMail'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling sendRecoveryMail'
            );
        }
        // verify the required parameter 'inline_object9' is set
        if ($inline_object9 === null || (is_array($inline_object9) && count($inline_object9) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_object9 when calling sendRecoveryMail'
            );
        }

        $resourcePath = '/account/recovery-password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object9)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object9));
            } else {
                $httpBody = $inline_object9;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
